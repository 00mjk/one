#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2016, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

###############################################################################
# This script is used retrieve the file size of a disk
###############################################################################

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver2'

################################################################################

def check_valid(parameter, label)
    if parameter.nil? || parameter.empty?
        STDERR.puts "Not enough information to create the image. " +
                    "Missing '#{label}'."
        exit -1
    end
end

################################################################################

drv_action_enc = ARGV[0]
id             = ARGV[1]

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc), 'DS_DRIVER_ACTION_DATA')

ds_ref       = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/VCENTER_DS_REF"]
host_id      = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/VCENTER_CLUSTER"]
dc_ref       = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/VCENTER_DC_REF"]
img_id       = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/ID"]
adapter_type = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/ADAPTER_TYPE"]
disk_type    = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/DISK_TYPE"]
size         = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/SIZE"]
fs_type      = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/FSTYPE"]

check_valid img_id, "img_id"
check_valid host_id, "vcenter_cluster"
check_valid adapter_type, "adapter_type"
check_valid disk_type, "disk_type"
check_valid size, "size"
check_valid ds_ref, "ds_ref"
check_valid dc_ref, "dc_ref"

# TODO path in vCenter? choose a specific directory

img_name = "one-#{img_id}"

if fs_type == "save_as"
    puts img_name + ".vmdk"
    exit 0
end

begin
    vi_client = VCenterDriver::VIClient.new_from_host(host_id)
    ds = VCenterDriver::Datastore.new_from_ref(vi_client, ds_ref)
    dc = VCenterDriver::Datacenter.new_from_ref(vi_client, dc_ref)

    puts ds.create_virtual_disk(dc, img_name, size, adapter_type, disk_type)
rescue Exception => e
    STDERR.puts "Error creating virtual disk #{img_src}."\
                " Reason: #{e.message}"
    exit -1
end
