#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2015, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

###############################################################################
# This script is used retrieve the file size of a disk 
###############################################################################

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
    VAR_LOCATION="/var/lib/one" if !defined?(VAR_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
    VAR_LOCATION=ONE_LOCATION+"/var" if !defined?(VAR_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'opennebula'
require 'fileutils'

drv_action_enc = ARGV[0]
id             = ARGV[1]

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc), 'DS_DRIVER_ACTION_DATA')

img_path = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/PATH"]
md5      = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/MD5"]
sha1     = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/SHA1"]
nodecomp = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NO_DECOMPRESS"]
limit_bw = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/LIMIT_TRANSFER_BW"]
hostname = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/VCENTER_CLUSTER"]
ds_name  = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/NAME"]


if img_path.nil?
    STDERR.puts "Not enough information to register the image,"\
                " missing image path."
    exit -1
end

if img_path.start_with? "vcenter://"
    # File already in the vCenter datastore

    puts img_path.sub("vcenter://","")
else
    downsh_args = " "
    downsh_args += "--md5 #{md5} " if md5 and !md5.empty? and !md5.eql? "-"
    downsh_args += "--sha1 #{sha1} " if sha1 and !sha1.empty?
    downsh_args += "--nodecomp " if nodecomp and !nodecomp.empty?
    downsh_args += "--limit #{limit_bw} " if limit_bw and !limit_bw.empty?

    # Generate target path
    str_for_target_path = Time.now.to_s + id.to_s
    target_path = Digest::MD5.hexdigest(str_for_target_path) + ".vmdk"

    files_to_upload = Array.new

    # Let's find out if we are dealing with a gzip tarball
    if img_path.start_with? "http://"
        mt = `curl #{img_path} 2> /dev/null|head -n 1024 | file -b --mime-type -`
        is_file_gzipped = mt.chomp.eql? "application/x-gzip"
    else
        is_file_gzipped = `file -b #{img_path}`.start_with? "gzip"
    end

    # If the file is a tar.gz, decompress and upload all files
    if is_file_gzipped
        temp_folder = VAR_LOCATION + "/vcenter/" + File.basename(img_path) + "/"
        FileUtils.mkdir_p(temp_folder) if !File.directory?(temp_folder)

        if img_path.start_with? "http://"
            # Download file since we need to decompress it
            img_filename = File.basename(img_path)
            system("curl #{img_path} > #{temp_folder + img_filename}"\
                   " 2> /dev/null")
            # The following code will use the downloaded image
            img_path = temp_folder + img_filename
        end

        # Decomppress file
        rs = system("cd #{temp_folder} && tar xzf #{img_path} &> /dev/null")
        (FileUtils.rm_rf(temp_folder) ; raise "Error extracting tar for #{descriptor_name}") unless rs

        # Read descriptor
        descriptor_path=Dir[temp_folder+"/*"].select{|f| 
                                   `file -b #{f}`.start_with? "ASCII" }
        (FileUtils.rm_rf(temp_folder) ; raise "Error, malformed vmdk") if descriptor_path.size!=1
        descriptor = File.read(descriptor_path[0]).split("\n")
        flat_files = descriptor.select{|l| l.start_with?("RW")}

        files_to_upload << descriptor_path[0]

        flat_files.each{|file| 
              files_to_upload << temp_folder + 
                file.split(" ")[-1].chomp.chomp('"').reverse.chomp('"').reverse
        }
    else
        files_to_upload << img_path
    end

    files_to_upload.reverse.each_with_index {|file_to_upload, index|
        if index == files_to_upload.size - 1
            uploader_args = hostname + " " + ds_name + " " + target_path
        else
            uploader_args = hostname + " " + ds_name + " " + 
                            File.basename(file_to_upload) + "&> /dev/null"
        end

        # Copy to stdout
        downloader_args = downsh_args + file_to_upload + " - "

        # Build the pipe for the descriptor
        cmd = "#{File.dirname(__FILE__)}/../downloader.sh #{downloader_args} |"\
              "#{File.dirname(__FILE__)}/../vcenter_uploader.rb #{uploader_args}"

        system(cmd)
    }

    FileUtils.rm_rf(temp_folder) if is_file_gzipped
end
