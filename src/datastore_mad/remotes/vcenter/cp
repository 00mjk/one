#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2015, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

###############################################################################
# This script is used retrieve the file size of a disk 
###############################################################################

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'opennebula'

drv_action_enc = ARGV[0]
id             = ARGV[1]

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc), 'DS_DRIVER_ACTION_DATA')

img_path = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/PATH"]
md5      = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/MD5"]
sha1     = drv_action["/DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/SHA1"]
nodecomp = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NO_DECOMPRESS"]
limit_bw = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/LIMIT_TRANSFER_BW"]
hostname = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/VCENTER_CLUSTER"]
ds_name  = drv_action["/DS_DRIVER_ACTION_DATA/DATASTORE/NAME"]


if img_path.nil?
    STDERR.puts "Not enough information to register the image,"\
                " missing image path."
    exit -1
end

if img_path.start_with? "vcenter://"
    # No upload to datastore is supported, cp is a dummy operation to 
    #Â reference an already existing image

    puts img_path.sub("vcenter://","")
else
    downloader_args = " "
    downloader_args += "--md5 #{md5} " if md5
    downloader_args += "--sha1 #{sha1} " if sha1
    downloader_args += "--nodecomp " if nodecomp
    downloader_args += "--limit #{limit_bw} " if nodecomp
    # Copy to stdout
    downloader_args += img_path + " - "

    # Generate target path
    str_for_target_path = Time.now.to_s + id.to_s
    target_path = Digest::MD5.hexdigest(str_for_target_path) + ".vmdk"

    uploader_args = hostname + " " + ds_name + " " + target_path

    cmd = "#{File.dirname(__FILE__)}/../downloader.sh #{downloader_args} |"\
          "#{File.dirname(__FILE__)}/../vcenter_uploader.rb #{uploader_args}"

    system(cmd)
end
