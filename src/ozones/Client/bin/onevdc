#!/usr/bin/env ruby

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'ozones_helper/vdc_helper.rb'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "`onevdc` command [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION
    
    set :format, :vdcid, "VDC ID" do |arg|
        arg.match(/^[0123456789]+$/) ? [0,arg] : [-1]
    end

    ########################################################################
    # Global Options
    ######################################################################## 
    set :option, CommandParser::OPTIONS
    
    begin
        helper = VDCHelper.new "vdc"
    rescue Exception => e  
        warn e.message
        exit -1
    end
    
    command :create, 'Create a new VDC', :file do
        helper.create_resource(args[0])
    end
    
    command :show, 'Show information of a particular VDC', :vdcid do
        helper.show_resource(args[0],options)
    end
    
    command :list, 'Lists VDCs in the pool', 
            :options=>CLIHelper::OPTIONS+OpenNebulaHelper::OPTIONS do
        helper.list_pool(options)
    end

    command :delete, 'Deletes a VDC', :vdcid do
        helper.delete_resource(args[0],options) 
    end

    command :addhost, 'Adds the set of hosts to the VDC', 
            :vdcid, :range do
        helper.addhost(args[0], args[1], options)
    end

    command :delhost, 'Deletes the set of hosts from the VDC',
            :vdcid, :range do
        helper.delhost(args[0], args[1], options)
    end
end
