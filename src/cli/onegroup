#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2014, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/onegroup_helper'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "`onegroup` <command> [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneGroupHelper.new

    before_proc do
        helper.set_client(options)
    end

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS+OpenNebulaHelper::CLIENT_OPTIONS

    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC
    list_options << OpenNebulaHelper::DESCRIBE

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :groupid, OneGroupHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :groupid_list, OneGroupHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :clusterid, OpenNebulaHelper.rname_to_id_desc("CLUSTER") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "CLUSTER")
    end

    set :format, :zoneid, OpenNebulaHelper.rname_to_id_desc("ZONE") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "ZONE")
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new Group. A group name can be passed as the only argument,
        or a file containing a group template or via command line arguments

        Examples:

          - using a template description file:

            onegroup create group_description.tmpl

          - create a group with admin group, admin user and allow group users
            to only create new templates and VMs, and group admins to manage
            templates, vms, images and virtual networks

            onegroup create --name groupA --admin_group admin_groupA 
                            --admin_user admin_userA --admin_password somestr
                            --resource TEMPLATE+VM 
                            --admin_resources TEMPLATE+VM+IMAGE+NET

    EOT

    command :create, create_desc, [:file, :group_name, nil], :options =>
            OpenNebulaHelper::GROUP_OPTIONS do

        if args[0] && !options.empty?
            STDERR.puts "You can not use both template file and template"<<
                " creation options."
            next -1
        end

        if !args[0] && options.empty?
            STDERR.puts "Please use either a template, just a group name or command arguments"
            next -1
        end

        if options && options[:admin_user]
            if !options[:admin_passwd]
                STDERR.puts "Admin user needs password"
                next -1
            end

            admin_user=Hash.new
            admin_user[:name]      = options[:admin_user]
            admin_user[:password]  = options[:admin_passwd]
            if options[:admin_driver]
                admin_user[:auth_driver] = options[:admin_driver]
            end
            options[:user] = admin_user
        end

        if args[0] && File.exists?(args[0])
            hashed_template = helper.parse_template(File.open(args[0]).read)
            helper.create_complete_resource(hashed_template)
        elsif !options.empty?
            helper.create_complete_resource(options)
        elsif args[0]
            helper.create_resource(options) do |group|
                group.allocate(args[0])
            end
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given Group
    EOT

    command :delete, delete_desc, [:range, :groupid_list] do
        helper.perform_actions(args[0],options,"deleted") do |obj|
            obj.delete
        end
    end

    list_desc = <<-EOT.unindent
        Lists Groups in the pool
    EOT

    command :list, list_desc, :options=>list_options do
        helper.list_pool(options)
    end

    show_desc = <<-EOT.unindent
        Shows information for the given Group
    EOT

    command :show, show_desc,[:groupid, nil], :options=>OpenNebulaHelper::XML do
        group = args[0] || OpenNebula::Group::SELF
        helper.show_resource(group,options)
    end

    quota_desc = <<-EOT.unindent
        Set the quota limits for the group. If a path is not provided the
        editor will be launched to modify the current quotas.
    EOT

    command :quota, quota_desc, :groupid, [:file, nil] do
        helper.perform_action(args[0], options, "modified") do |group|
            rc = group.info

            if OpenNebula.is_error?(rc)
                puts rc.message
                exit -1
            end

            str = OneQuotaHelper.set_quota(group, args[1])
            rc  = group.set_quota(str)

            if OpenNebula.is_error?(rc)
                puts rc.message
                exit -1
            end
        end
    end  

    batchquota_desc = <<-EOT.unindent
        Sets the quota limits in batch for various groups. If a path is not
        provided the editor will be launched to create new quotas.
    EOT

    command :batchquota, batchquota_desc, [:range, :groupid_list],
            [:file, nil] do
        batch_str = OneQuotaHelper.get_batch_quota(args[1])

        helper.perform_actions(args[0], options, "modified") do |group|
            str = OneQuotaHelper.merge_quota(group, batch_str)

            if OpenNebula.is_error?(str)
                str
            else
                rc  = group.set_quota(str)
                rc
            end
        end
    end


    defaultquota_desc = <<-EOT.unindent
        Sets the default quota limits for the groups. If a path is not provided
        the editor will be launched to modify the current default quotas.
    EOT

    command :defaultquota, defaultquota_desc, [:file, nil] do
        system = System.new(OneGroupHelper.get_client(options))

        default_quotas = system.get_group_quotas()

        if OpenNebula.is_error?(default_quotas)
            puts default_quotas.message
            exit(-1)
        end

        str = OneQuotaHelper.set_quota(default_quotas, args[0])

        rc  = system.set_group_quotas(str)

        if OpenNebula.is_error?(rc)
            puts rc.message
            exit(-1)
        end

        exit 0
    end

    add_provider_desc = <<-EOT.unindent
        Adds a resource provider (cluster of a zone) to the given group.
        clusterid can be set to ALL
    EOT

    command :add_provider, add_provider_desc, [:range, :groupid_list], :zoneid, :clusterid do
        if args[2] and args[2].class != Fixnum and args[2].upcase == "ALL"
            args[2]=10
        end

        helper.perform_actions(args[0],options,"resource provider added") do |obj|
            obj.add_provider(args[1].to_i, args[2].to_i)
        end
    end

    del_provider_desc = <<-EOT.unindent
        Deletes a resource provider (cluster of a zone) from the given group
    EOT

    command :del_provider, del_provider_desc, [:range, :groupid_list], :zoneid, :clusterid do
        if args[2] and args[2].class != Fixnum and args[2].upcase == "ALL"
            args[2]=10
        end
        helper.perform_actions(args[0],options,"resource provider deleted") do |obj|
            obj.del_provider(args[1].to_i, args[2].to_i)
        end
    end
end
