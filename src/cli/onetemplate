#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2011, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/onetemplate_helper'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "oneimage COMMAND [args..] [options..]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneTemplateHelper.new

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS
    
    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :templateid, OneTemplateHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :templateid_list, OneTemplateHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :filterflag, OneTemplateHelper.filterflag_to_i_desc do |arg|
        helper.filterflag_to_i(arg)
    end

    ########################################################################
    # Commands
    ########################################################################
    command :chgrp, 'Changes the Template group',[:range, :templateid_list], :text do
        helper.perform_actions(args[0],options,"User/Group changed") do |t|
            t.chown(-1, args[1].to_i)
        end
    end

    command :chown, 'Changes the Template owner and group', [:range, :templateid_list], :text, [:text,nil] do
        gid = args[2].nil? ? -1 : args[2].to_id
        helper.perform_actions(args[0],options,"Group changed") do |t|
            t.chown(args[1].to_i, gid)
        end
    end

    command :create, 'Registers a Template', :file do
        helper.create_resource(options) do |t|
            template=File.read(args[0])
            t.allocate(template)
        end
    end

    command :show, 'Gets info from a Template', :imageid, :options=>OpenNebulaHelper::XML do
        helper.show_resource(args[0],options)
    end

    command :list, 'Lists Templates in the pool', [:filterflag, nil], :options=>list_options do
        helper.list_pool(options)
    end

    command :publish, 'Publishes a Template', [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"published") do |t|
            t.publish
        end
    end

    command :unpublish, 'Unpublishes a Template', [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"unpublished") do |t|
            t.unpublish
        end
    end

    command :delete, 'Removes a Template', [:range, :imageid_list] do
        helper.perform_actions(args[0],options,"deleted") do |t|
            t.delete
        end
    end
    
    command :top, 'Tops Templatea in the pool', [:filterflag, nil], :options=>list_options do
        helper.list_pool(options, true)
    end
end
