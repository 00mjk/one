#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2011, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/onehost_helper'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "onehost COMMAND [args..] [options..]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneHostHelper.new

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :hostid, OneHostHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :hostid_list, OneHostHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :filterflag, OneHostHelper.filterflag_to_i_desc do |arg|
        helper.filterflag_to_i(arg)
    end

    ########################################################################
    # Commands
    ########################################################################
    command :create, 'Create a new Virtual Network', :text, :text, :text, :text do
        helper.create_resource(args, options)
    end

    command :delete, 'Removes a Virtual Network', [:range, :vnetid_list] do
        helper.perform_actions(args[0],options,"deleted") do |vn|
            vn.delete
        end
    end

    command :disable, 'Disbales Host', [:range,:vnetid_list] do
        helper.perform_actions(args[0],options,"unpublished") do |vn|
            vn.disable
        end
    end

    command :enable, 'Enables Host', [:range,:vnetid_list] do
        helper.perform_actions(args[0],options,"published") do |vn|
            vn.enable
        end
    end

    command :list, 'Lists Virtual Networks in the pool', [:filterflag, nil],
            :options=>CLIHelper::OPTIONS+OpenNebulaHelper::OPTIONS do
        helper.list_pool(options)
    end

    command :show, 'Gets info from a Host', :hostid,
            :options=>OpenNebulaHelper::XML do
        helper.show_resource(args[0],options)
    end

    command :sync, 'Synchronizes probes with remote hosts' do
        if ONE_LOCATION
            FileUtils.touch "#{ONE_LOCATION}/var/remotes"
        else
            FileUtils.touch "/var/lib/one/remotes"
        end
        0
    end

    command :top, 'Tops Hosts in the pool', [:filterflag, nil],
            :options=>CLIHelper::OPTIONS+OpenNebulaHelper::OPTIONS do
        helper.list_pool(options, true)
    end
end
