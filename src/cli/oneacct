#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2012, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #


ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'rubygems'

require 'cli/one_helper'
require 'cli/command_parser'
require 'json'

require 'optparse'
require 'optparse/time'

class AcctHelper

    def initialize(client)
        @client = client
    end

=begin
    List of <HISTORY> child elements

    OID
    SEQ
    HOSTNAME
    HID
    STIME
    ETIME
    VMMMAD
    VNMMAD
    PSTIME
    PETIME
    RSTIME
    RETIME
    ESTIME
    EETIME
    REASON
=end

    def list_history(data)
        table = CLIHelper::ShowTable.new(nil, self) do
            column :VID, "Virtual Machine ID", :size=>4 do |d|
                d["OID"]
            end

            column :SEQ, "History record sequence number", :size=>3 do |d|
                d["SEQ"]
            end

            column :HOSTNAME, "Host name", :size=>15 do |d|
                d["HOSTNAME"]
            end

            column :REASON, "VM state change reason", :size=>4 do |d|
                VirtualMachine.get_reason d["REASON"]
            end

            column :START_TIME, "Start time", :size=>14 do |d|
                OpenNebulaHelper.time_to_str(d['STIME'])
            end

            column :END_TIME, "End time", :size=>14 do |d|
                OpenNebulaHelper.time_to_str(d['ETIME'])
            end

            column :MEMORY, "Assigned memory", :right, :size=>6 do |d|
                OpenNebulaHelper.unit_to_str(d["VM/TEMPLATE/MEMORY"].to_i, {})
            end

            column :CPU, "Number of CPUs", :right, :size=>3 do |d|
                d["VM/TEMPLATE/CPU"]
            end

            column :NET_RX, "Data received from the network", :right, :size=>6 do |d|
                OpenNebulaHelper.unit_to_str(d["VM/NET_RX"].to_i, {})
            end

            column :NET_TX, "Data sent to the network", :right, :size=>6 do |d|
                OpenNebulaHelper.unit_to_str(d["VM/NET_TX"].to_i, {})
            end

            default :VID, :HOSTNAME, :REASON, :START_TIME, :END_TIME, :MEMORY, :CPU, :NET_RX, :NET_TX
        end

        table.show(data)
    end

public
    def list_users(xml_info, options=nil)

        xmldoc = XMLElement.new
        xmldoc.initialize_xml(xml_info, 'HISTORY_RECORDS')

        uids = xmldoc.retrieve_elements('HISTORY/VM/UID')

        if uids.nil?
            puts "No records found."
            exit 0
        end

        uids.uniq!

        history_elems = []

        uids.each do |uid|
            CLIHelper.scr_bold
            CLIHelper.scr_underline
            # TODO: username?
            puts "# User #{uid}                        "
            CLIHelper.scr_restore
            puts

            history_elems.clear

            vm_ids = xmldoc.retrieve_elements("HISTORY/VM[UID=#{uid}]/ID")
            vm_ids.uniq!

            vm_ids.each do |vid|

                if ( options[:split] )
                    history_elems.clear
                end

                xmldoc.each("HISTORY[OID=#{vid}]") do |history|
                    history_elems << history
                end

                if ( options[:split] )
                    list_history(history_elems)
                    puts
                end
            end

            if ( !options[:split] )
                list_history(history_elems)
                puts
            end
        end
    end
end


options = Hash.new

options[:format] = :table

opts = OptionParser.new do |opts|
    opts.on('-s', '--start TIME', Time,
        'Start date and time to take into account') do |ext|
            options[:start]=ext
    end

    opts.on("-e", "--end TIME", Time,
        "End date and time" ) do |ext|
            options[:end]=ext
    end

    # TODO: Allow username
    opts.on("-u", "--user user", Integer,
        "User id to make accounting" ) do |ext|
            options[:user]=ext.to_i
    end

    opts.on("-j", "--json",
        "Output in json format" ) do |ext|
            options[:format]=:json
    end

    opts.on("-x", "--xml",
        "Output in xml format" ) do |ext|
            options[:format]=:xml
    end

    opts.on("--split",
        "Split the output in a table for each VM" ) do |ext|
            options[:split]=ext
    end

    opts.on()
end


begin
    opts.parse!(ARGV)
rescue OptionParser::ParseError => e
    STDERR.puts "Error: " << e.message
    exit(-1)
end


client = OpenNebula::Client.new

acct_helper = AcctHelper.new(client)

time_start  = -1
time_end    = -1
filter_flag = VirtualMachinePool::INFO_ALL

time_start  = options[:start].to_i if options[:start]
time_end    = options[:end].to_i   if options[:end]
filter_flag = options[:user].to_i  if options[:user]


ret = client.call("vmpool.accounting",
            filter_flag,
            time_start,
            time_end)

if OpenNebula.is_error?(ret)
    puts ret.message
    exit -1
end


case options[:format]
when :table
    if ( time_start != -1 or time_end != -1 )
        print "Showing active history records from "

        CLIHelper.scr_bold

        if ( time_start != -1 )
            print Time.at(time_start).to_s
        else
            print "-"
        end

        CLIHelper.scr_restore

        print " to "

        CLIHelper.scr_bold

        if ( time_end != -1 )
            print Time.at(time_end).to_s
        else
            print "-"
        end

        CLIHelper.scr_restore
        puts
        puts
    end

    acct_helper.list_users(ret, options)

when :xml
    puts ret

when :json
    xmldoc = XMLElement.new
    xmldoc.initialize_xml(ret, 'HISTORY_RECORDS')
    puts xmldoc.to_hash.to_json

end
