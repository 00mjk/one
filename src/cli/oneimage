#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2011, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/oneimage_helper'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "oneimage COMMAND [args..] [options..]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneImageHelper.new

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS
    
    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :imageid, OneImageHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :imageid_list, OneImageHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :filterflag, OneImageHelper.filterflag_to_i_desc do |arg|
        helper.filterflag_to_i(arg)
    end

    ########################################################################
    # Commands
    ########################################################################
    command :create, 'Registers an Image', :file do
        helper.create_resource(options) do |image|
            template=File.read(args[0])
            image.allocate(template)
        end
    end

    command :show, 'Gets info from an Image', :imageid, :options=>OpenNebulaHelper::XML do
        helper.show_resource(args[0],options)
    end

    command :list, 'Lists Images in the pool', [:filterflag, nil], :options=>list_options do
        helper.list_pool(options)
    end

    command :publish, 'Publishes an Image', [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"published") do |image|
            image.publish
        end
    end

    command :unpublish, 'Unpublishes an Image', [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"unpublished") do |image|
            image.unpublish
        end
    end

    command :persistent, 'Makes an Image persistent', [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"made persistent") do |image|
            image.publish
        end
    end

    command :enable, 'Enable an Image', [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"enabled") do |image|
            image.enable
        end
    end

    command :disable, 'Disable an Image', [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"disabled") do |image|
            image.disable
        end
    end

    command :nonpersistent, 'Make an Image non persistent', [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"made non persistent") do |image|
            image.unpublish
        end
    end

    command :update, 'Modifies an Image attribute', :imageid, :text, :text do
        helper.perform_action(args[0],options,"modified") do |image|
            image.update(args[1], args[2])
        end
    end

    command :addattr, 'Add a new Image attribute', :imageid, :text, :text do
        helper.perform_action(args[0],options,"att  ribute added") do |image|
            image.update(args[1], args[2])
        end
    end

    command :rmattr, 'Delete an Image attribute', :imageid, :text do
        helper.perform_action(args[0],options,"attribute removed") do |image|
            image.remove_attr(args[1])
        end
    end

    command :delete, 'Removes an Image', [:range, :imageid_list] do
        helper.perform_actions(args[0],options,"deleted") do |image|
            image.delete
        end
    end
    
    command :top, 'Tops Images in the pool', [:filterflag, nil], :options=>list_options do
        helper.list_pool(options, true)
    end
end
