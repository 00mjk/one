#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2011, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/oneuser_helper'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "oneuser COMMAND [args..] [options..]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneUserHelper.new

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS
    
    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC
    
    READ_FILE={
        :name => "read_file",
        :short => "-r",
        :large => "--read-file",
        :description => "Read password from file"
    }

    PLAIN={
        :name => "plain",
        :short => "-p",
        :large => "--plain-password",
        :description => "Store plain password"
    }
    
    create_options = [READ_FILE, PLAIN]

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :userid, OneUserHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :userid_list, OneUserHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :filterflag, OneUserHelper.filterflag_to_i_desc do |arg|
        helper.filterflag_to_i(arg)
    end
    
    set :format, :password, OneUserHelper.password_to_str_desc do |arg|
        OneUserHelper.password_to_str(arg, options)
    end

    ########################################################################
    # Commands
    ########################################################################
    command :create, 'Creates a new User', :text, :password, :options=>create_options do
        helper.create_resource(options) do |user|
            user.allocate(args[0], args[1])
        end
    end

    command :list, 'Lists Templates in the pool', [:filterflag, nil], :options=>list_options do
        helper.list_pool(options)
    end

    command :passwd, 'Change the given Users password', :userid, :password do
        helper.perform_action(args[0],options,"password changed") do |user|
            user.passwd(args[1])
        end
    end

    command :delete, 'Removes a Template', [:range, :userid_list] do
        helper.perform_actions(args[0],options,"deleted") do |user|
            user.delete
        end
    end
end
