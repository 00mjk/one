#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2016, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

# clone fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'opennebula'
require 'vcenter_driver2'

################################################################################

def check_valid(parameter, label)
    if parameter.nil? || parameter.empty?
        STDERR.puts "Not enough information to clone the image. " +
                    "Missing '#{label}'."
        exit -1
    end
end

def get_ds(ds_id, client)
    ds = OpenNebula::Datastore.new_with_id(ds_id, client)

    rc = ds.info
    if OpenNebula::is_error?(rc)
        STDERR.puts(rc.message)
        exit -1
    end

    ds
end

################################################################################

src          = ARGV[0]
dst          = ARGV[1]
vm_id        = ARGV[2]
source_ds_id = ARGV[3]

target_ds_id = dst.split("/")[-3]
disk_id = dst.split(".")[-1]

src_host, src_path = src.split ":"
hostname, dst_path = dst.split ":"

################################################################################

host_pool = VCenterDriver::VIHelper.one_pool(OpenNebula::HostPool)

# host_id
host = host_pool.select{|host| host['NAME'] == hostname}[0] rescue nil

if host.nil?
    STDERR.puts "No host found (#{hostname})."
    exit -1
end

host_id = host['ID']

# get ds_ref (source image)
source_ds = VCenterDriver::VIHelper.one_item(OpenNebula::Datastore, source_ds_id)
source_ds_ref = source_ds['TEMPLATE/VCENTER_DS_REF']

target_ds = VCenterDriver::VIHelper.one_item(OpenNebula::Datastore, target_ds_id)
target_ds_ref = target_ds['TEMPLATE/VCENTER_DS_REF']

# calculate target path
target_path = src_path.split(".").first + "-#{vm_id}-#{disk_id}.vmdk"

# vi_client
vi_client = VCenterDriver::VIClient.new_from_host(host_id)

source_ds_vc = VCenterDriver::Datastore.new_from_ref(vi_client, source_ds_ref)

if source_ds_ref == target_ds_ref
    target_ds_vc = source_ds_vc
else
    target_ds_vc = VCenterDriver::Datastore.new_from_ref(vi_client, target_ds_ref)
end

target_ds_name_vc = target_ds_vc['name']

source_ds_vc.copy_virtual_disk(src_path, target_ds_name_vc, target_path)
