#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2016, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

# DELETE <host:remote_system_ds/disk.i|host:remote_system_ds/> vmid dsid
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)
# ---------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver'

path = ARGV[0]
vmid = ARGV[1]
dsid = ARGV[2]

check_valid path, "path"
check_valid vmid, "vmid"
check_valid dsid, "dsid"

hostname, img_path = path.split(":")

# Get host ID
host = VCenterDriver::VIHelper.find_by_name(OpenNebula::HostPool, hostname)
host_id = host['ID']

# Get VM
one_vm = VCenterDriver::VIHelper.one_item(OpenNebula::VirtualMachine, vmid)
vm_ref = one_vm['DEPLOY_ID']

begin
    vi_client = VCenterDriver::VIClient.new_from_host(host_id)
    vm = VCenterDriver::VirtualMachine.new_from_ref(vm_ref, vi_client)
rescue Exception => e
    vi_client.close_connection

    STDERR.puts "Error obtaining the vCenter client and VM object."\
                " Reason: #{e.message}\n#{e.backtrace}"
    exit -1
end

if path.match(/disk\.\d+$/)
    # Detach and remove the disk

    # Get DS ref
    one_ds = VCenterDriver::VIHelper.one_item(OpenNebula::Datastore, dsid)
    ds_ref = one_ds['TEMPLATE/VCENTER_DS_REF']

    # Get image path
    disk_id = img_path.split(".")[-1]

    disk = one_vm.retrieve_xmlelements("TEMPLATE/DISK[DISK_ID=#{disk_id}]").first
    img_path = VCenterDriver::FileHelper.get_img_name(disk, vmid)

    begin
        # TODO: if the deploy has failed, the disks may exist, but the vm may
        # not exist...
        vm.one_item = one_vm

        # detach the disk
        vm.detach_disk(disk)

        # delete the disk
        ds = VCenterDriver::Datastore.new_from_ref(ds_ref, vi_client)
        ds.delete_virtual_disk(img_path)
    rescue Exception => e
        STDERR.puts "Error delete virtual disk #{img_path} in datastore #{dsid}."\
                    " Reason: #{e.message}\n#{e.backtrace}"
        exit -1
    ensure
        vi_client.close_connection
    end
else
    # Remove the VM
    begin
        # All OpenNebula managed disks have been detached. The VM may have still
        # disks that belong to the template (VCENTER_MANAGED disks). These disks
        # will be deleted with the destroy operation. If the user wants to
        # save them to a VM, it can be done using the disk-saveas operation.
        vm.destroy
    rescue Exception => e
        STDERR.puts "Error unregistering vm #{vmid} (#{vm_ref})."\
                    " Reason: #{e.message}\n#{e.backtrace}"
        exit -1
    ensure
        vi_client.close_connection
    end
end
