#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2016, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

# DELETE <host:remote_system_ds/disk.i|host:remote_system_ds/> vmid dsid
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# Return if this has called for the whole directory, instead of for a specific
# disk.

if !ARGV[0].match(/disk\.\d+$/)
    exit(0)
end

# ---------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver2'

################################################################################

def check_valid(parameter, label)
    if parameter.nil? || parameter.empty?
        STDERR.puts "Not enough information to delete the image. " +
                    "Missing '#{label}'."
        exit -1
    end
end

################################################################################

path = ARGV[0]
vmid = ARGV[1]
dsid  = ARGV[2]

check_valid path, "path"
check_valid vmid, "vmid"
check_valid dsid, "dsid"

hostname, img_path = path.split(":")

# Get host ID
host = VCenterDriver::VIHelper.find_by_name(OpenNebula::HostPool, hostname)
host_id = host['ID']

# Get DS ref
one_ds = VCenterDriver::VIHelper.one_item(OpenNebula::Datastore, dsid)
ds_ref = one_ds['TEMPLATE/VCENTER_DS_REF']

check_valid ds_ref, "ds_ref"

# Get image path
disk_id = img_path.split(".")[-1]
one_vm = VCenterDriver::VIHelper.one_item(OpenNebula::VirtualMachine, vmid)
disks = one_vm.retrieve_xmlelements("TEMPLATE/DISK[DISK_ID=#{disk_id}]")
img_path = VCenterDriver::FileHelper.get_img_name(disks.first, vmid)

begin
    vi_client = VCenterDriver::VIClient.new_from_host(host_id)

    ds_vc = VCenterDriver::Datastore.new_from_ref(ds_ref, vi_client)

    ds_vc.delete_virtual_disk(img_path)
rescue Exception => e
    STDERR.puts "Error delete virtual disk #{img_path} in datastore #{dsid}."\
                " Reason: #{e.message}\n#{e.backtrace}"
    exit -1
end
