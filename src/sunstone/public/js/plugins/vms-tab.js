/* -------------------------------------------------------------------------- */
/* Copyright 2002-2011, OpenNebula Project Leads (OpenNebula.org)             */
/*                                                                            */
/* Licensed under the Apache License, Version 2.0 (the "License"); you may    */
/* not use this file except in compliance with the License. You may obtain    */
/* a copy of the License at                                                   */
/*                                                                            */
/* http://www.apache.org/licenses/LICENSE-2.0                                 */
/*                                                                            */
/* Unless required by applicable law or agreed to in writing, software        */
/* distributed under the License is distributed on an "AS IS" BASIS,          */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   */
/* See the License for the specific language governing permissions and        */
/* limitations under the License.                                             */
/* -------------------------------------------------------------------------- */

/*Virtual Machines tab plugin*/

var vms_tab_content = 
'<form id="virtualMachine_list" action="javascript:alert(\'js error!\');">\
  <div class="action_blocks">\
  </div>\
<table id="datatable_vmachines" class="display">\
  <thead>\
    <tr>\
      <th class="check"><input type="checkbox" class="check_all" value="">All</input></th>\
      <th>ID</th>\
      <th>User</th>\
      <th>Name</th>\
      <th>Status</th>\
      <th>CPU</th>\
      <th>Memory</th>\
      <th>Hostname</th>\
      <th>Start Time</th>\
    </tr>\
  </thead>\
  <tbody id="tbodyvmachines">\
  </tbody>\
</table>\
</form>';

var create_vm_tmpl =
'<div id="vm_create_tabs">\
	<ul>\
		<li><a href="#easy">Wizard KVM</a></li>\
		<li><a href="#easy">Wizard XEN</a></li>\
		<li><a href="#manual">VMWare</a></li>\
		<li><a href="#manual">Advanced mode</a></li>\
	</ul>\
	<div id="easy">\
		<form>\
			<div id="template_type" style="margin-bottom:1em;">\
				<!--\
				<div class="clear"></div>\
				<label for="template_type">Select VM type:</label>\
				<input type="radio" id="kvm" name="template_type" value="kvm">KVM</input>\
				<input type="radio" id="xen" name="template_type" value="xen">XEN</input>\
				<div class="clear"></div>\
				-->\
				<p style="font-size:0.8em;text-align:right;"><i>Fields marked with <span style="display:inline-block;" class="ui-icon ui-icon-alert" /> are mandatory</i><br />\
				<a href="#" id="fold_unfold_vm_params"><u>Fold / Unfold all sections</u></a></p>\
			</div>\
\
			  <!-- capacity section name, memory, cpu vcpu -->\
			  <div class="vm_section" id="capacity">\
			    <div class="show_hide" id="add_capacity_cb">\
				  <h3>Capacity options</h3>\
			    </div>\
			  <fieldset><legend>Capacity</legend>\
				<div class="vm_param kvm_opt xen_opt">\
				  <label for="NAME">Name:</label>\
				  <input type="text" id="NAME" name="name"/>\
				  <div class="tip">	Name that the VM will get for description purposes. If NAME is not supplied a name generated by one will be in the form of one-&lt;VID&gt;.</div>\
				</div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="MEMORY">Memory:</label>\
				  <input type="text" id="MEMORY" name="memory" size="4" />\
				  <div class="tip">Amount of RAM required for the VM, in Megabytes.</div>\
			    </div>\
     		    <div class="vm_param kvm_opt xen_opt">\
				<label for="CPU">CPU:</label>\
				  <input type="text" id="CPU" name="cpu" size="2"/>\
				  <div class="tip">Percentage of CPU divided by 100 required for the Virtual Machine. Half a processor is written 0.5.</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="VCPU">VCPU:</label>\
				  <input type="text" id="VCPU" name="vcpu" size="3" />\
				  <div class="tip">Number of virtual cpus. This value is optional, the default hypervisor behavior is used, usually one virtual CPU.</div>\
			    </div>\
			  </fieldset>\
			  </div>\
			  <!-- OS and Boot options\
				arch, kernel, initrd, root, kernel_cmd, bootloader, boot\
			  -->\
			<div class="vm_section" id="os_boot_opts">\
			    <div class="show_hide" id="add_os_boot_opts_cb">\
			    <h3>Boot/OS options <a id="add_os_boot_opts" class="icon_left" href="#"><span class="ui-icon ui-icon-plus" /></a></h3>\
			    </div>\
			  <fieldset><legend>OS and Boot options</legend>\
				<div class="vm_param kvm">\
				  <label for="ARCH">Architecture:</label>\
				  <select id="ARCH" name="arch">\
					<option value="i686">i686</option>\
					<option value="x86-64">x86-64</option>\
				  </select>\
				  <div class="tip">CPU architecture to virtualization</div>\
				</div>\
				<!--xen necesita kernel o bootloader.\
				Opciones de kernel son obligatorias si se activa kernel-->\
				<div class="" id="kernel_bootloader">\
				  <label>Boot method:</label>\
				  <select id="boot_method" name="boot_method">\
				    <option id="no_boot" name="no_boot" value=""></option>\
					<option value="kernel">Kernel</option>\
					<option value="bootloader">Bootloader</option>\
				  </select>\
				  <div class="tip">Select boot method</div>\
				</div>\
			    <div class="vm_param kvm_opt xen kernel">\
				  <label for="KERNEL">Kernel:</label>\
				  <input type="text" id="KERNEL" name="kernel" />\
				  <div class="tip">Path to the OS kernel to boot the image</div>\
				</div>\
     		    <div class="vm_param kvm xen kernel">\
				  <label for="INITRD">Initrd:</label>\
				  <input type="text" id="INITRD" name="initrd"/>\
				  <div class="tip">Path to the initrd image</div>\
			    </div>\
			    <div class="vm_param kvm xen kernel">\
				  <label for="ROOT">Root:</label>\
				  <input type="text" id="ROOT" name="root"/>\
				  <div class="tip">Device to be mounted as root</div>\
			    </div>\
				<div class="vm_param kvm xen kernel">\
				  <label for="KERNEL_CMD">Kernel commands:</label>\
				  <input type="text" id="KERNEL_CMD" name="kernel_cmd" />\
				  <div class="tip">Arguments for the booting kernel</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen bootloader">\
				  <label for="BOOTLOADER">Bootloader:</label>\
				  <input type="text" id="BOOTLOADER" name="bootloader" />\
				  <div class="tip">Path to the bootloader executable</div>\
			    </div>\
			    <div class="vm_param kvm">\
				  <label for="BOOT">Boot:</label>\
				  <select id="BOOT" name="boot">\
					<option value="hd">hd</option>\
					<option value="hd">fd</option>\
					<option value="hd">cdrom</option>\
					<option value="hd">network</option>\
				  </select>\
				  <div class="tip">Boot device type</div>\
			    </div>\
			    </fieldset>\
			  </div>\
\
\
			  <!--disks section using image or declaring\
			  image, image ID, bus, target, driver\
			  type, source, size, format, clone, save,\
			  readonly  SEVERAL DISKS-->\
			  <div class="vm_section" id="disks">\
				  <div class="show_hide" id="add_disks_cb">\
				  <h3>Add disks/images <a id="add_disks" class="icon_left" href="#"><span class="ui-icon ui-icon-plus" /></a></h3>\
			     </div>\
			   <fieldset><legend>Disks</legend>\
			     <div class="" id="image_vs_disk">\
				  <label>Add disk/image</label>\
				  <input type="radio" id="add_disk" name="image_vs_disk" value="disk">Disk</input>\
				  <!--<label for="add_disk">Add a disk</label>-->\
				  <input type="radio" id="add_image" name="image_vs_disk" value="image">Image</input>\
				  <!--<label for="add_image">Add an image</label>-->\
			     </div>\
			    <div class="clear"></div>\
			    <div class="vm_param kvm xen add_image">\
				  <label for="IMAGE">Image:</label>\
				  <select type="text" id="IMAGE" name="image">\
				  </select>\
				  <div class="tip">Name of the image to use</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="BUS">Bus:</label>\
				  <select id="BUS" name="bus">\
					<option value="ide">IDE</option>\
					<option value="scsi">SCSI</option>\
				  </select>\
				  <div class="tip">Type of disk device to emulate: ide, scsi</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="TARGET">Target:</label>\
				  <input type="text" id="TARGET" name="target" />\
				  <div class="tip">	Device to map image disk. If set, it will overwrite the default device mapping</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="DRIVER">Driver:</label>\
				  <input type="text" id="DRIVER" name="driver" />\
				  <div class="tip">Specific image mapping driver. KVM: raw, qcow2. Xen:tap:aio:, file:. VMware unsupported</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt add_disk">\
				  <label for="TYPE">Type:</label>\
				  <select id="TYPE" name="type">\
					<option value="disk">Disk</option>\
					<option value="floppy">Floppy</option>\
					<option value="cdrom">CD-ROM</option>\
					<option value="swap">Swap</option>\
					<option value="fs">FS</option>\
					<option value="block">Block</option>\
				  </select>\
				  <div class="tip">Disk type</div>\
			    </div>\
			    <div class="vm_param kvm xen add_disk">\
				  <label for="SOURCE">Source:</label>\
				  <input type="text" id="SOURCE" name="source" />\
				  <div class="tip">Disk file location path or URL</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt add_disk ">\
			    <!--Mandatory for swap, fs and block images-->\
				  <label for="SIZE">Size:</label>\
				  <input type="text" id="SIZE" name="size" />\
				  <div class="tip">Disk file location path or URL. Mandatory for swap, fs and block images</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt add_disk ">\
			    <!--mandatory for fs images-->\
				  <label for="FORMAT">Format:</label>\
				  <input type="text" id="FORMAT" name="format" />\
				  <div class="tip">Filesystem type for the fs images</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt add_disk">\
				  <label for="CLONE">Clone:</label>\
				  <select id="CLONE" name="clone">\
					<option value="yes">Yes</option>\
					<option value="no">No</option>\
				  </select>\
				  <div class="tip">Clone this image</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt add_disk">\
				  <label for="SAVE">Save:</label>\
				   <select id="SAVE" name="save">\
				    <option value="no">No</option>\
					<option value="yes">Yes</option>\
				  </select>\
				  <div class="tip">Save this image after shutting down the VM</div>\
			    </div>\
				<div class="vm_param kvm_opt xen_opt add_disk">\
				  <label for="READONLY">Read only:</label>\
				  <select id="READONLY" name="readonly">\
				    <option value="no">No</option>\
					<option value="yes">Yes</option>\
				  </select>\
				  <div class="tip">Mount image as read-only</div>\
			    </div>\
			    <div class="">\
					<button class="add_remove_button add_button" id="add_disk_button" value="add_disk">Add</button>\
					<button class="add_remove_button" id="remove_disk_button" value="remove_disk">Remove selected</button>\
					<div class="clear"></div>\
					<label style="" for="disks_box">Current disks:</label>\
					<select id="disks_box" name="disks_box" style="width:150px;height:100px;" multiple>\
					</select>\
					<div class="clear"></div>\
					</div>\
			  </fieldset>\
			  </div>\
\
			  <!-- network section  network, network id,, ip, mac,\
			  bridge, target,  script, model -->\
			  <div class="vm_section" id="networks">\
			    <div class="show_hide" id="add_networks_cb">\
			      <h3>Setup Networks <a id="add_networks" class="icon_left" href="#"><span class="ui-icon ui-icon-plus" /></a></h3>\
			    </div>\
			  <fieldset><legend>Network</legend>\
			    <div class="" id="network_vs_niccfg">\
				  <label>Add network</label>\
				  <input type="radio" id="add_network" name="network_vs_niccfg" value="network">Predefined</input>\
				  <!--<label style="width:200px;" for="add_network">Pre-defined network</label>-->\
				  <input type="radio" id="add_niccfg" name="network_vs_niccfg" value="niccfg">Manual</input>\
				  <!--<label for="add_niccfg">Manual network</label>-->\
				  <!--<div class="tip"></div>-->\
			    </div>\
			    <div class="clear"></div>\
				<div class="vm_param kvm_opt xen_opt network">\
				  <label for="NETWORK">Network:</label>\
				  <select type="text" id="NETWORK" name="network">\
				  </select>\
				  <div class="tip">Name of the network to attach this device</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt niccfg">\
				  <label for="IP">IP:</label>\
				  <input type="text" id="IP" name="ip" />\
				  <div class="tip">Request an specific IP from the Network</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt niccfg">\
				  <label for="MAC">MAC:</label>\
				  <input type="text" id="MAC" name="mac" />\
				  <div class="tip">HW address associated with the network interface</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt niccfg">\
				  <label for="BRIDGE">Bridge</label>\
				  <input type="text" id="BRIDGE" name="bridge" />\
				  <div class="tip">	Name of the bridge the network device is going to be attached to</div>\
			    </div>\
			    <div class="vm_param kvm_opt niccfg">\
				  <label for="TARGET">Target:</label>\
				  <input type="text" id="TARGET" name="nic_target" />\
				  <div class="tip">Name for the tun device created for the VM</div>\
			    </div>\
			    <div class="vm_param kvm_opt niccfg">\
				  <label for="SCRIPT">Script:</label>\
				  <input type="text" id="SCRIPT" name="script" />\
				  <div class="tip">Name of a shell script to be executed after creating the tun device for the VM</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt niccfg">\
				  <label for="MODEL">Model:</label>\
				  <input type="text" id="MODEL" name="model" />\
				  <div class="tip">Hardware that will emulate this network interface. With Xen this is the type attribute of the vif.</div>\
			    </div>\
			    <div class="">\
			        <button class="add_remove_button add_button" id="add_nic_button" value="add_nic">Add</button>\
				    <button class="add_remove_button" id="remove_nic_button" value="remove_nic">Remove selected</button>\
				    <div class="clear"></div>\
					<label for="nics_box">Current NICs:</label>\
					<select id="nics_box" name="nics_box" style="width:150px;height:100px;" multiple>\
					</select>\
					 </div>\
			  </fieldset>\
			  </div>\
\
\
			  <!--Input several type, bus-->\
			  <div class="vm_section" id="inputs">\
			  	<div class="show_hide" id="add_inputs_cb">\
			  	  <h3>Add inputs <a id="add_inputs" class="icon_left" href="#"><span class="ui-icon ui-icon-plus" /></a></h3>\
			    </div>\
			  <fieldset><legend>Inputs</legend>\
			  	<div class="vm_param kvm_opt">\
				  <label for="TYPE">Type:</label>\
				  <select id="TYPE" name="input_type">\
					<option value="mouse">Mouse</option>\
					<option value="tablet">Tablet</option>\
				  </select>\
				  <div class="tip"></div>\
			    </div>\
			    <div class="vm_param kvm_opt">\
				   <label for="BUS">Bus:</label>\
				  <select id="BUS" name="input_bus">\
					<option value="usb">USB</option>\
					<option value="ps2">PS2</option>\
					<option value="xen">XEN</option>\
				  </select>\
				  <div class="tip"></div>\
			    </div>\
			    <div class="">\
					<button class="add_remove_button add_button" id="add_input_button" value="add_input" class="kvm_opt">Add</button>\
					<button class="add_remove_button" id="remove_input_button" value="remove_input" class="kvm_opt">Remove selected</button>\
					<div class="clear"></div>\
					<label for="inputs_box">Current inputs:</label>\
					<select id="inputs_box" name="inputs_box" style="width:150px;height:100px;" multiple>\
					</select>\
					</div>\
			  </fieldset>\
			  </div>\
\
\
			  <!--graphics type, listen, port, passwd, keymap -->\
			  <div class="vm_section" id="graphics">\
			  	<div class="show_hide" id="add_graphics_cb">\
			  	  <h3>Add Graphics <a id="add_graphics" class="icon_left" href="#"><span class="ui-icon ui-icon-plus" /></a></h3>\
			    </div>\
			  <fieldset><legend>Graphics</legend>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="TYPE">Graphics type:</label>\
				  <select id="TYPE" name="">\
                    <option value="">Please select</option>\
					<option id="vnc" value="vnc">VNC</option>\
					<option value="sdl">SDL</option>\
				  </select>\
				  <div class="tip"></div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="LISTEN">Listen IP:</label>\
				  <input type="text" id="LISTEN" name="graphics_ip" />\
				  <div class="tip">IP to listen on</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="PORT">Port:</label>\
				  <input type="text" id="PORT" name="port" />\
				  <div class="tip">Port for the VNC server</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="PASSWD">Password:</label>\
				  <input type="text" id="PASSWD" name="graphics_pw" />\
				  <div class="tip">Password for the VNC server</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="KEYMAP">Keymap</label>\
				  <input type="text" id="KEYMAP" name="keymap" />\
				  <div class="tip">Keyboard configuration locale to use in the VNC display</div>\
			    </div>\
			  </fieldset>\
			  </div>\
\
\
			  <!--context textarea? -->\
			  <div class="vm_section" id="context">\
			  	<div class="show_hide" id="add_context_cb">\
			  	  <h3>Add context <a id="add_context" class="icon_left" href="#"><span class="ui-icon ui-icon-plus" /></a></h3>\
			    </div>\
			  <fieldset><legend>Context</legend>\
			  <div class="vm_param kvm_opt xen_opt">\
			  <label for="CONTEXT">Context:</label>\
			  <input type="text" id="CONTEXT" name="context" />\
			  <!--<textarea id="CONTEXT" style="width:320px;height:15em;"></textarea>-->\
			  </div>\
			  </fieldset>\
			  </div>\
\
\
			  <!--placement requirements rank -->\
			  <div class="vm_section" id="placement">\
			   <div class="show_hide" id="add_placement_cb">\
			      <h3>Add placement options <a id="add_placement" class="icon_left" href="#"><span class="ui-icon ui-icon-plus" /></a></h3>\
			   </div>\
			  <fieldset><legend>Placement</legend>\
	     	    <div class="vm_param kvm_opt xen_opt">\
				  <label for="REQUIREMENTS">Requirements:</label>\
				  <input type="text" id="REQUIREMENTS" name="requirements" />\
				  <div class="tip">Boolean expression that rules out provisioning hosts from list of machines suitable to run this VM</div>\
			    </div>\
			    <div class="vm_param kvm_opt xen_opt">\
				  <label for="RANK">Rank:</label>\
				  <input type="text" id="RANK" name="rank" />\
				  <div class="tip">	This field sets which attribute will be used to sort the suitable hosts for this VM. Basically, it defines which hosts are more suitable than others</div>\
			    </div>\
			  </fieldset>\
			  </div>\
\
\
			  <!--raw type=> set to current, data -->\
			  <div class="vm_section" id="raw">\
			  	<div class="show_hide" id="add_raw_cb">\
			  	<h3>Add Hypervisor raw options <a id="add_raw" class="icon_left" href="#"><span class="ui-icon ui-icon-plus" /></a></h3>\
			    </div>\
			  <fieldset><legend>Raw</legend>\
			  <!--set TYPE to current xen/kvm -->\
			  	<div class="vm_param kvm_opt xen_opt">\
				  <label for="DATA">Data:</label>\
				  <input type="hidden" id="TYPE" name="type" />\
				  <input type="text" id="DATA" name="data" />\
				  <div class="tip">	Raw data to be passed directly to the hypervisor</div>\
			    </div>\
			  </fieldset>\
			  </div>\
\
\
			  <!-- submit -->\
			 <fieldset>\
			  <div class="form_buttons">\
				<button class="button" id="create_vm_form_easy" value="OpenNebula.VM.create">\
				Create\
				</button>\
				<button class="button" id="reset_vm_form" type="reset" value="reset">Reset</button>\
			  </div>\
			</fieldset>\
		</form>\
	</div><!--easy mode -->\
	<div id="manual">\
		<form>\
		<h3 style="margin-bottom:10px;">Write the Virtual Machine template here</h3>\
		  <fieldset style="border-top:none;">\
			<textarea id="textarea_vm_template" style="width:100%; height:15em;"></textarea>\
			<div class="clear"></div>\
		  </fieldset>\
		  <fieldset>\
			<div class="form_buttons">\
			  <button class="button" id="create_vm_form_manual" value="OpenNebula.VM.create">\
			  Create\
			  </button>\
			<button class="button" type="reset" value="reset">Reset</button>\
			</div>\
		  </fieldset>\
		</form>\
	</div>\
</div>';

var vmachine_list_json = {};
var dataTable_vMachines;

var vm_actions = {
    "VM.create" : {
        type: "create",
        call: OpenNebula.VM.create,
        callback: addVMachineElement,
        error: onError
    },
            
    "VM.create_dialog" : {
        type: "custom",
        call: popUpCreateVMDialog,
    },
    
    "VM.list" : {
        type: "list",
        call: OpenNebula.VM.list,
        callback: updateVMachinesView,
        error: onError
    },
    
    "VM.show" : {
        type: "single",
        call: OpenNebula.VM.show,
        callback: updateVMachineElement,
        error: onError
    },
    
    "VM.showinfo" : {
        type: "single",
        call: OpenNebula.VM.show,
        callback: updateVMInfo,
        error: onError
    },
    
    "VM.refresh" : {
        type: "custom",
        call : function (){
            waitingNodes(dataTable_vMachines);
            Sunstone.runAction("VM.list");
        },
    },
    
    "VM.autorefresh" : {
        type: "custom",
        call : function() {
            OpenNebula.VM.list({timeout: true, success: updateVMachinesView,error: onError});
        },
    },
            
    "VM.deploy" : {
        type: "multiple",
        call: OpenNebula.VM.deploy,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError,
    },
            
    "VM.migrate" : {
        type: "multiple",
        call: OpenNebula.VM.migrate,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.livemigrate" : {
        type: "multiple",
        call: OpenNebula.VM.livemigrate,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.hold" : {
        type: "multiple",
        call: OpenNebula.VM.hold,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.release" : {
        type: "multiple",
        call: OpenNebula.VM.release,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.suspend" : {
        type: "multiple",
        call: OpenNebula.VM.suspend,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.resume" : {
        type: "multiple",
        call: OpenNebula.VM.resume,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.stop" : {
        type: "multiple",
        call: OpenNebula.VM.stop,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.restart" : {
        type: "multiple",
        call: OpenNebula.VM.restart,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.shutdown" : {
        type: "multiple",
        call: OpenNebula.VM.shutdown,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.cancel" : {
        type: "multiple",
        call: OpenNebula.VM.cancel,
        callback: function (req) {
            Sunstone.runAction("VM.show",req.request.data[0]);
        },
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
            
    "VM.delete" : {
        type: "multiple",
        call: OpenNebula.VM.delete,
        callback: deleteVMachineElement,
        dataTable: function(){return dataTable_vMachines},
        error: onError
    },
    
    "VM.log" : {
        type: "single",
        call: OpenNebula.VM.log,
        callback: function(req,res) {
            var log_lines = res.split("\n");
            var colored_log = '';
            for (line in log_lines){
                line = log_lines[line];
                if (line.match(/\[E\]/)){
                    line = '<span class="vm_log_error">'+line+'</span>'
                }
                colored_log += line + "\n";
            }
            var log_tab = {
                title: "VM log",
                content: '<pre>'+colored_log+'</pre>'
            }
            Sunstone.updateInfoPanelTab("vm_info_panel","log_tab",log_tab);
            Sunstone.popUpInfoPanel("vm_info_panel",2);
            
        },
        error: function(request,error_json){
            $("#vm_log pre").html('');
            onError(request,error_json);
        }
    }
}



var vm_buttons = {
    "VM.refresh" : {
        type: "image",
        text: "Refresh list",
        img: "/images/Refresh-icon.png",
        condition: True
    },
    
    "VM.create_dialog" : {
        type: "create_dialog",
        text: "+ New",
        condition: True
    },
    
    "VM.shutdown" : {
        type: "confirm",
        text: "Shutdown",
        tip: "This will initiate the shutdown process in the selected VMs",
        condition: True
    },
    
    "action_list" : {
        type: "select",
        actions: {
            "VM.deploy" : {
                type: "confirm_with_select",
                text: "Deploy",
                tip: "This will deploy the selected VMs on the chosen host",
                select: function(){
                            if (hosts_select){return hosts_select}
                            else {return ""}
                        },
                condition: True
            },
            "VM.migrate" : {
                type: "confirm_with_select",
                text: "Migrate",
                tip: "This will migrate the selected VMs to the chosen host",
                select: function(){
                            if (hosts_select){return hosts_select}
                            else {return ""}
                        },
                condition: True
                
            },
            "VM.livemigrate" : {
                type: "confirm_with_select",
                text: "Live migrate",
                tip: "This will live-migrate the selected VMs to the chosen host",
                select: function(){
                            if (hosts_select){return hosts_select}
                            else {return ""}
                        },
                condition: True                
            },
            "VM.hold" : {
                type: "confirm",
                text: "Hold",
                tip: "This will hold selected pending VMs from being deployed",
                condition: True                
            },
            "VM.release" : {
                type: "confirm",
                text: "Release",
                tip: "This will release held machines",
                condition: True  
            },
            "VM.suspend" : {
                type: "confirm",
                text: "Suspend",
                tip: "This will suspend selected machines",
                condition: True                  
            },
            "VM.resume" : {
                type: "confirm",
                text: "Resume",
                tip: "This will resume selected stopped or suspended VMs",
                condition: True                  
            },
            "VM.stop" : {
                type: "confirm",
                text: "Stop",
                tip: "This will stop selected VMs",
                condition: True                  
            },
            "VM.restart" : {
                type: "confirm",
                text: "Restart",
                tip: "This will redeploy selected VMs (in UNKNOWN or BOOT state)",
                condition: True                  
            },
            "VM.cancel" : {
                type: "confirm",
                text: "Cancel",
                tip: "This will cancel selected VMs",
                condition: True                  
            }
        },
        condition: True
    },
    
    "VM.delete" : {
        type: "confirm",
        text: "Delete",
        tip: "This will delete the selected VMs from the database",
        condition: True
    }
}

var vm_info_panel = {
    "vm_info_tab" : {
        title: "Virtual Machine information",
        content: ""
    },
    "vm_template_tab" : {
        title: "VM template",
        content: ""
    },
    "vm_log_tab" : {
        title: "VM log",
        content: ""
    }
}

var vms_tab = {
    title: "Virtual Machines",
    content: vms_tab_content,
    buttons: vm_buttons,
    condition: True
}

Sunstone.addActions(vm_actions);
Sunstone.addMainTab('vms_tab',vms_tab);
Sunstone.addInfoPanel('vm_info_panel',vm_info_panel);


function vMachineElementArray(vm_json){
	var vm = vm_json.VM;
    var state = OpenNebula.Helper.resource_state("vm",vm.STATE);
    if (state == "ACTIVE") {
        state = OpenNebula.Helper.resource_state("vm_lcm",vm.LCM_STATE);
    }
	return [
			'<input type="checkbox" id="vm_'+vm.ID+'" name="selected_items" value="'+vm.ID+'"/>',
			vm.ID,
			vm.USERNAME ? vm.USERNAME : getUserName(vm.UID),
			vm.NAME,
			state,
			vm.CPU,
			humanize_size(vm.MEMORY),
			vm.HISTORY ? vm.HISTORY.HOSTNAME : "--",
			str_start_time(vm)
		]
}

function vMachineInfoListener(){

	$('#tbodyvmachines tr').live("click", function(e){
		if ($(e.target).is('input')) {return true;}
		aData = dataTable_vMachines.fnGetData(this);
		id = $(aData[0]).val();
        Sunstone.runAction("VM.showinfo",id);
		return false;
	});
}


function updateVMachineElement(request, vm_json){
	id = vm_json.VM.ID;
	element = vMachineElementArray(vm_json);
	updateSingleElement(element,dataTable_vMachines,'#vm_'+id)
}

function deleteVMachineElement(req){
	deleteElement(dataTable_vMachines,'#vm_'+req.request.data);
}

function addVMachineElement(request,vm_json){
    id = vm_json.VM.ID;
    notifySubmit('OpenNebula.VM.create',id);
	element = vMachineElementArray(vm_json);
	addElement(element,dataTable_vMachines);
    updateVMInfo(null,vm_json);
}

function updateVMachinesView(request, vmachine_list){
	vmachine_list_json = vmachine_list;
	vmachine_list_array = [];

	$.each(vmachine_list,function(){
		vmachine_list_array.push( vMachineElementArray(this));
	});

	updateView(vmachine_list_array,dataTable_vMachines);
	updateDashboard("vms",vmachine_list_json);
}

function updateVMInfo(request,vm){
	var vm_info = vm.VM;
	var info_tab = {
        title : "VM information",
        content: '<table id="info_vm_table" class="info_table">\
			<thead>\
				<tr><th colspan="2">Virtual Machine information - '+vm_info.NAME+'</th></tr>\
			</thead>\
			<tr>\
				<td class="key_td">ID</td>\
				<td class="value_td">'+vm_info.ID+'</td>\
			</tr>\
			<tr>\
				<td class="key_td">Name</td>\
				<td class="value_td">'+vm_info.NAME+'</td>\
			</tr>\
			<tr>\
				<td class="key_td">State</td>\
				<td class="value_td">'+OpenNebula.Helper.resource_state("vm",vm_info.STATE)+'</td>\
			</tr>\
			<tr>\
				<td class="key_td">LCM State</td>\
				<td class="value_td">'+OpenNebula.Helper.resource_state("vm_lcm",vm_info.LCM_STATE)+'</td>\
			</tr>\
			<tr>\
				<td class="key_td">Start time</td>\
				<td class="value_td">'+pretty_time(vm_info.STIME)+'</td>\
			</tr>\
			<tr>\
				<td class="key_td">Deploy ID</td>\
				<td class="value_td">'+(typeof(vm_info.DEPLOY_ID) == "object" ? "-" : vm_info.DEPLOY_ID)+'</td>\
			</tr>\
		</table>\
		<table id="vm_monitoring_table" class="info_table">\
			<thead>\
				<tr><th colspan="2">Monitoring information</th></tr>\
			</thead>\
			<tr>\
				<td class="key_td">Net_TX</td>\
				<td class="value_td">'+vm_info.NET_TX+'</td>\
			</tr>\
			<tr>\
				<td class="key_td">Net_RX</td>\
				<td class="value_td">'+vm_info.NET_RX+'</td>\
			</tr>\
			<tr>\
				<td class="key_td">Used Memory</td>\
				<td class="value_td">'+humanize_size(vm_info.MEMORY)+'</td>\
			</tr>\
			<tr>\
				<td class="key_td">Used CPU</td>\
				<td class="value_td">'+vm_info.CPU+'</td>\
			</tr>\
		</table>'
    }
    
    var template_tab = {
        title: "VM Template",
        content: '<table id="vm_template_table" class="info_table">\
		<thead><tr><th colspan="2">VM template</th></tr></thead>'+
		prettyPrintJSON(vm_info.TEMPLATE)+
		'</table>'        
    }
    
    var log_tab = {
        title: "VM log",
        content: '<pre>'+spinner+'</pre>'
    }
        
	Sunstone.updateInfoPanelTab("vm_info_panel","vm_info_tab",info_tab);
    Sunstone.updateInfoPanelTab("vm_info_panel","vm_template_tab",template_tab);
    Sunstone.updateInfoPanelTab("vm_info_panel","vm_log_tab",log_tab);
    
    Sunstone.popUpInfoPanel("vm_info_panel");

}

function setupCreateVMDialog(){
    	/* #### createVMachineDialog() helper functions #### */

    vmTabChange = function(event,ui){
	// ui.tab     // anchor element of the selected (clicked) tab
	// ui.panel   // element, that contains the selected/clicked tab contents
	// ui.index   // zero-based index of the selected (clicked) tab
        switch(ui.index){
            case 0:
                enable_kvm();
                break;
            case 1:
                enable_xen();
                break;
            case 2:
                break;
            case 3:
                break;
        }
    }

	update_dynamic_css = function(){
        //This function used to be useful to add specific
        //css to elements that changed.
        //Now its not needed anymore apparently
        /*
		if (templ_type=="kvm"){
			$(xen_man_items).css({"font-weight":"normal"});
			$(kvm_man_items).css({"background":"green","font-weight":"bold"});
			$(kvm_opt_items).css({"background":"yellow"});
		} else if (templ_type=="xen"){
			$(kvm_man_items).css({"font-weight":"normal"});
			$(xen_man_items).css({"background":"green","font-weight":"bold"});
			$(xen_opt_items).css({"background":"yellow"});
		};*/
	};

	enable_kvm = function(){
		man_class="kvm";
		opt_class="kvm_opt";
		$(xen_items).attr("disabled","disabled");
		$(xen_items).css("background","");
		$(kvm_items).removeAttr("disabled");
		//$(items+':disabled').hide();


		//particularities
		$('div#disks select#TYPE option:selected').removeAttr("selected");
		$('div#disks select#TYPE').prepend(
		'<option id="no_type" value="">None</option>');
		$('div#disks select#TYPE option#no_type').attr("selected","selected");

        $('select#boot_method option').removeAttr("selected");
		$('select#boot_method option#no_boot').html("Driver default");
		$('select#boot_method option').removeAttr("selected");
        $('.kernel, .bootloader', $('div#os_boot_opts')).hide();

		$('input#TYPE', section_raw).val("kvm");

		$(section_inputs).show();

        update_dynamic_css();
	};

	enable_xen = function(){
		man_class="xen";
		opt_class="xen_opt";
		$(kvm_items).attr("disabled","disabled");
		$(kvm_items).css("background","");
		$(xen_items).removeAttr("disabled");
		//$(items+':disabled').hide();


		//particularities
		$('div#disks select#TYPE option#no_type').remove();

		$('select#boot_method option:selected').removeAttr("selected");
        $('select#boot_method option#no_boot').html("Please choose");
		$('.kernel, .bootloader', $('div#os_boot_opts')).hide();


		$('input#TYPE', section_raw).val("kvm");
		$(section_inputs).hide(); //not present for xen
		update_dynamic_css();
	};

	mandatory_filter = function(context){
			man_items = "";
			if (templ_type == "kvm")
			{ man_items = ".kvm"; }
			else if (templ_type == "xen")
			{ man_items = ".xen"; }
			else {return false;};

			//find enabled mandatory items in this context
			man_items = $(man_items+' input:visible',context);
			r = true;
			$.each(man_items,function(){
				if ($(this).parents(".vm_param").attr("disabled") ||
					!($(this).val().length)) {
					r = false;
					return false;
				};
			});
			return r;

		};

	box_add_element = function(context,box_tag,filter){
			value="";
			params= $('.vm_param',context);
			inputs= $('input:enabled',params);
			selects = $('select:enabled',params);
			fields = $.merge(inputs,selects);

			//are fields correctly set?
			result = filter();
			if (!result) {
				notifyError("There are mandatory parameters missing in this section");
				return false;
			}

			value={};
			$.each(fields,function(){
				if (!($(this).parents(".vm_param").attr("disabled")) &&
					$(this).val().length){
					id = $(this).attr('id').length ? $(this).attr('id') :  $(this).parent().attr('id');
					value[id] = $(this).val();
				}
			});
			string = JSON.stringify(value);
			option= '<option value=\''+string+'\'>'+
					stringJSON(value)+
					'</option>';
			$('select'+box_tag,context).append(option);
			return false;
	};

	box_remove_element = function(section_tag,box_tag){
			context = $(section_tag);
			$('select'+box_tag+' :selected',context).remove();
			return false;
	};

	addSectionJSON = function(template_json,context){
			params= $('.vm_param',context);
			inputs= $('input:enabled',params);
			selects = $('select:enabled',params);
			fields = $.merge(inputs,selects);

			fields.each(function(){
				if (!($(this).parents(".vm_param").attr("disabled"))){ //if ! disabled
					if ($(this).val().length){ //if has a length
						template_json[$(this).attr('id')]=$(this).val();
					}
				}
			});
	}

	addBoxJSON = function(array,context,box_tag){
		$('select'+box_tag+' option',context).each(function(){
				array.push( JSON.parse($(this).val()) );
		});
	}

    removeEmptyObjects = function(obj){
        for (elem in obj){
            remove = false;
            value = obj[elem];
            if (value instanceof Array)
            {
                if (value.length == 0)
                    remove = true;
            }
            else if (value instanceof Object)
            {
                var obj_length = 0;
                for (e in value)
                    obj_length += 1;
                if (obj_length == 0)
                    remove = true;
            }
            else
            {
                value = String(value);
                if (value.length == 0)
                    remove = true;
            }
            if (remove)
                delete obj[elem];
        }
        return obj;
    }

	iconToggle = function(){
		$('.icon_right').toggle(
			function(e){
				$('span',e.currentTarget).removeClass("ui-icon-plusthick");
				$('span',e.currentTarget).addClass("ui-icon-minusthick");
			},function(e){
				$('span',e.currentTarget).removeClass("ui-icon-minusthick");
				$('span',e.currentTarget).addClass("ui-icon-plusthick");
			});
	}

	capacity_setup = function(){

		//$('fieldset',section_capacity).hide();

		//~ $('#add_capacity',section_capacity).click(function(){
				//~ $('fieldset',section_capacity).toggle();
				//~ return false;
		//~ });

	}

	os_boot_setup = function(){
		$('fieldset',section_os_boot).hide();
		$('.bootloader, .kernel',section_os_boot).hide();

		$('#add_os_boot_opts',section_os_boot).click(function(){
			$('fieldset',section_os_boot).toggle();
            return false;
		});


        //Chrome workaround
        $('#boot_method').change(function(){
            $(this).trigger("click");
        });

        $('#boot_method',section_os_boot).click(function(){
			select = $(this).val();
			switch (select)
			{
				case "kernel":
					$('.bootloader',section_os_boot).hide();
					$('.bootloader',section_os_boot).attr("disabled","disabled");
					$('.kernel',section_os_boot).show();
					$('.kernel',section_os_boot).removeAttr("disabled");
					break;
				case "bootloader":
					$('.kernel',section_os_boot).hide();
					$('.kernel',section_os_boot).attr("disabled","disabled");
					$('.bootloader',section_os_boot).show();
					$('.bootloader',section_os_boot).removeAttr("disabled");
					break;
				default:
					$('.kernel, .bootloader',section_os_boot).hide();
					$('.kernel, .bootloader',section_os_boot).attr("disabled","disabled");
					$('.kernel input, .bootloader input',section_os_boot).val("");
			};
		});
	};

	disks_setup = function(){

		$('fieldset',section_disks).hide();
		$('.vm_param', section_disks).hide();
		//$('#image_vs_disk',section_disks).show();

		$('#add_disks', section_disks).click(function(){
			$('fieldset',section_disks).toggle();
            return false;
		});

		$('#image_vs_disk input',section_disks).click(function(){
			//$('fieldset',section_disks).show();
            $('.vm_param', section_disks).show();
			select = $('#image_vs_disk :checked',section_disks).val();
			switch (select)
			{
				case "disk":
					$('.add_image',section_disks).hide();
					$('.add_image',section_disks).attr("disabled","disabled");
					$('.add_disk',section_disks).show();
					$('.add_disk',section_disks).removeAttr("disabled");
					$('#TARGET',section_disks).parent().removeClass(opt_class);
					$('#TARGET',section_disks).parent().addClass(man_class);
					break;
				case "image":
					$('.add_disk',section_disks).hide();
					$('.add_disk',section_disks).attr("disabled","disabled");
					$('.add_image',section_disks).show();
					$('.add_image',section_disks).removeAttr("disabled");
					$('#TARGET',section_disks).parent().removeClass(man_class);
					$('#TARGET',section_disks).parent().addClass(opt_class);
					break;
			}
			$('#SIZE',section_disks).parent().hide();
			$('#SIZE',section_disks).parent().attr("disabled","disabled");
			$('#FORMAT',section_disks).parent().hide();
			$('#SIZE',section_disks).parent().attr("disabled","disabled");
			$('#TYPE :selected',section_disks).removeAttr("selected");

			update_dynamic_css();
		});



		//activate correct mandatory attributes when
		//selecting disk type

        //Chrome workaround
        $('select#TYPE',section_disks).change(function(){
           $(this).trigger('click');
        });

		$('select#TYPE',section_disks).click(function(){
			select = $(this).val();
			switch (select) {
				//size,format,target
				case "swap":
					//size mandatory
					$('#SIZE',section_disks).parent().show();
					$('#SIZE',section_disks).parent().removeAttr("disabled");
					$('#SIZE',section_disks).parent().removeClass(opt_class);
					$('#SIZE',section_disks).parent().addClass(man_class);

					//target optional
					$('#TARGET',section_disks).parent().removeClass(man_class);
					$('#TARGET',section_disks).parent().addClass(opt_class);

					//format hidden
					$('#FORMAT',section_disks).parent().hide();
					$('#FORMAT',section_disks).parent().attr("disabled","disabled");
					break;
				case "fs":
					//size mandatory
					$('#SIZE',section_disks).parent().show();
					$('#SIZE',section_disks).parent().removeAttr("disabled");
					$('#SIZE',section_disks).parent().removeClass(opt_class);
					$('#SIZE',section_disks).parent().addClass(man_class);

					//target mandatory
					$('#TARGET',section_disks).parent().removeClass(opt_class);
					$('#TARGET',section_disks).parent().addClass(man_class);

					//format mandatory
					$('#FORMAT',section_disks).parent().show();
					$('#FORMAT',section_disks).parent().removeAttr("disabled");
					$('#FORMAT',section_disks).parent().removeClass(opt_class);
					$('#FORMAT',section_disks).parent().addClass(man_class);

					break;
				case "block":
					//size shown and optional
					$('#SIZE',section_disks).parent().show();
					$('#SIZE',section_disks).parent().removeAttr("disabled");
					$('#SIZE',section_disks).parent().removeClass(man_class);
					$('#SIZE',section_disks).parent().addClass(opt_class);

					//target mandatory
					$('#TARGET',section_disks).parent().removeClass(opt_class);
					$('#TARGET',section_disks).parent().addClass(man_class);

					//format hidden
					$('#FORMAT',section_disks).parent().hide();
					$('#FORMAT',section_disks).parent().attr("disabled","disabled");
					break;
				case "floppy":
				case "disk":
				case "cdrom":
					//size hidden
					$('#SIZE',section_disks).parent().hide();
					$('#SIZE',section_disks).parent().attr("disabled","disabled");

					//target mandatory
					$('#TARGET',section_disks).parent().removeClass(opt_class);
					$('#TARGET',section_disks).parent().addClass(man_class);

					//format optional
				    $('#FORMAT',section_disks).parent().hide();
				    $('#FORMAT',section_disks).parent().attr("disabled","disabled");

			}
			update_dynamic_css();
		});

		diskFilter = function(){
			return mandatory_filter(section_disks);
		};

		$('#add_disk_button',section_disks).click(function(){
			box_add_element(section_disks,'#disks_box',diskFilter);
			return false;
			});
		$('#remove_disk_button',section_disks).click(function(){
			box_remove_element(section_disks,'#disks_box');
			return false;
			});
	};

	networks_setup = function(){

		$('.vm_param',section_networks).hide();
		$('fieldset',section_networks).hide();

		$('#add_networks',section_networks).click(function(){
			$('fieldset',section_networks).toggle();
            return false;
		});

		$('#network_vs_niccfg input',section_networks).click(function(){

			select = $('#network_vs_niccfg :checked',section_networks).val();
			switch (select) {
				case "network":
					$('.niccfg',section_networks).hide();
					$('.niccfg',section_networks).attr("disabled","disabled");
					$('.network',section_networks).show();
					$('.network',section_networks).removeAttr("disabled");
					break;
				case "niccfg":
					$('.network',section_networks).hide();
					$('.network',section_networks).attr("disabled","disabled");
					$('.niccfg',section_networks).show();
					$('.niccfg',section_networks).removeAttr("disabled");
					break;
			}
		});

	nicFilter = function(){
			network = $('select#network :selected',section_networks).attr('id');
			ip = $('#IP',section_networks).val();
			mac = $('#MAC',section_networks).val();

			return (network != "no_network" || ip.length || mac.length);
		};

		$('#add_nic_button',section_networks).click(function(){
			box_add_element(section_networks,'#nics_box',nicFilter);
			return false;
			});
		$('#remove_nic_button',section_networks).click(function(){
			box_remove_element(section_networks,'#nics_box');
			return false;
			});

	};

	inputs_setup = function() {
		$('fieldset',section_inputs).hide();

		$('#add_inputs',section_inputs).click(function(){
				$('fieldset',section_inputs).toggle();
                return false;
		});

		$('#add_input_button',section_inputs).click(function(){
			//no filter
			box_add_element(section_inputs,'#inputs_box',function(){return true;});
			return false;
			});
		$('#remove_input_button',section_inputs).click(function(){
			box_remove_element(section_inputs,'#inputs_box');
			return false;
			});
	};

	graphics_setup = function(){
		$('fieldset',section_graphics).hide();
        $('.vm_param',section_graphics).hide();
        $('select#TYPE',section_graphics).parent().show();

		$('#add_graphics',section_graphics).click(function(){
			$('fieldset',section_graphics).toggle();
            return false;
		});

        //Chrome workaround
        $('select#TYPE',section_graphics).change(function(){
            $(this).trigger("click");
        });
		$('select#TYPE',section_graphics).click(function(){
			g_type = $(this).val();
			switch (g_type) {
				case "vnc":
                    $('#LISTEN',section_graphics).parent().show();
					$('#PORT',section_graphics).parent().show();
					$('#PASSWD',section_graphics).parent().show();
					$('#KEYMAP',section_graphics).parent().show();
					$('#PORT',section_graphics).parent().removeAttr("disabled");
					$('#PASSWD',section_graphics).parent().removeAttr("disabled");
					$('#KEYMAP',section_graphics).parent().removeAttr("disabled");
					break;
				case "sdl":
                    $('#LISTEN',section_graphics).parent().show();
					$('#PORT',section_graphics).parent().hide();
					$('#PASSWD',section_graphics).parent().hide();
					$('#KEYMAP',section_graphics).parent().hide();
					$('#PORT',section_graphics).parent().attr("disabled","disabled");
					$('#PASSWD',section_graphics).parent().attr("disabled","disabled");
					$('#KEYMAP',section_graphics).parent().attr("disabled","disabled");
					break;
                default:
                    $('#LISTEN',section_graphics).parent().hide();
					$('#PORT',section_graphics).parent().hide();
					$('#PASSWD',section_graphics).parent().hide();
					$('#KEYMAP',section_graphics).parent().hide();

			}
		});

	}

	context_setup = function(){
		$('fieldset',section_context).hide();

		$('#add_context',section_context).click(function(){
				$('fieldset',section_context).toggle();
                return false;
		});

	};

	placement_setup = function(){
		$('fieldset',section_placement).hide();

		$('#add_placement',section_placement).click(function(){
				$('fieldset',section_placement).toggle();
                return false;
		});

	};

	raw_setup = function(){
		$('fieldset',section_raw).hide();

		$('#add_raw',section_raw).click(function(){
				$('fieldset',section_raw).toggle();
                return false;
		});
	};
    
    //***CREATE VM DIALOG MAIN BODY***
    
    $('div#dialogs').append('<div title="Create Virtual Machine" id="create_vm_dialog"></div>');
	//Insert HTML in place
	$('#create_vm_dialog').html(create_vm_tmpl);
	$('#vm_create_tabs').tabs({
        select:vmTabChange
        });

	//Prepare jquery dialog
    var height = Math.floor($(window).height()*0.8); //set height to a percentage of the window
	$('#create_vm_dialog').dialog({
		autoOpen: false,
		modal: true,
		width: 700,
        height: height
	});
    
    $('#create_vm_dialog button').button();
    
    iconToggle(); //toogle +/- buttons

	//Sections, used to stay within their scope
	section_capacity = $('#capacity');
	section_os_boot = $('#os_boot_opts');
	section_disks = $('#disks');
	section_networks = $('#networks');
	section_inputs = $('#inputs');
	section_graphics = $('#graphics');
	section_context = $('#context');
	section_placement = $('#placement');
	section_raw = $('#raw');

	//Different selector for items of kvm and xen (mandatory and optional)
	items = '.vm_section input,.vm_section select';
	kvm_man_items = '.kvm input,.kvm select';
	kvm_opt_items = '.kvm_opt input, .kvm_opt select';
	kvm_items = kvm_man_items +','+kvm_opt_items;
	xen_man_items = '.xen input,.xen select';
	xen_opt_items = '.xen_opt input, .xen_opt select';
	xen_items = xen_man_items +','+ xen_opt_items;

	//Starting template type, optional items class and mandatory items class
	templ_type = "kvm";
	opt_class=".kvm_opt";
	man_class=".kvm";

	$('#template_type #kvm').attr("checked","checked"); //check KVM
	enable_kvm(); //enable all kvm options

	//handle change between templates.
	$("#template_type input").click(function(){
		templ_type = $("#template_type :checked").val();
		switch (templ_type)
		{
			case "kvm":
				enable_kvm();
				break;
			case "xen":
				enable_xen();
				break;
		}
	});

    $('#fold_unfold_vm_params').toggle(
        function(){
            $('.vm_section fieldset').show();
            return false;
        },
        function(){
            $('.vm_section fieldset').hide();
            $('.vm_section fieldset').first().show();
            return false;
        });

	capacity_setup();
	os_boot_setup();
	disks_setup();
	networks_setup();
	inputs_setup();
	graphics_setup();
	context_setup();
	placement_setup();
	raw_setup();

	$('button#create_vm_form_easy').click(function(){
		//validate form

		vm_json = {};

		//process capacity options
		scope = section_capacity;

		if (!mandatory_filter(scope)){
			notifyError("There are mandatory fields missing in the capacity section");
			return false;
		};
		addSectionJSON(vm_json,scope);

		//process os_boot_opts
		scope= section_os_boot;
		switch (templ_type){
			case "xen":
                boot_method = $('#boot_method option:selected',scope).val();
				if (!boot_method.length){
					notifyError("Xen templates must specify a boot method");
					return false;}
		};

		if (!mandatory_filter(scope)){
			notifyError("There are mandatory fields missing in the OS Boot options section");
			return false;
		};
		addSectionJSON(vm_json,scope);

		//process disks
		scope = section_disks;
		vm_json["DISK"] = [];
		addBoxJSON(vm_json["DISK"],scope,'#disks_box');

		//process nics -> fetch from box
		scope = section_networks;
		vm_json["NIC"] = [];
		addBoxJSON(vm_json["NIC"],scope,'#nics_box');

		//process inputs -> fetch from box
		scope = section_inputs;
		vm_json["INPUT"] = [];
		addBoxJSON(vm_json["INPUT"],scope,'#inputs_box');

		//process graphics -> fetch fields with value
		scope = section_graphics;
		vm_json["GRAPHICS"] = {};
		addSectionJSON(vm_json["GRAPHICS"],scope);

		//context -> include
		scope = section_context;
        var context = $('#CONTEXT',scope).val();
        if (context)
            vm_json["CONTEXT"] = context;

		//placement -> fetch with value
		scope = section_placement;
		addSectionJSON(vm_json,scope);

		//raw -> if value set type to driver and fetch
		scope = section_raw;
		vm_json["RAW"] = {};
		addSectionJSON(vm_json["RAW"],scope);

        // remove empty elements
        vm_json = removeEmptyObjects(vm_json);

        //wrap it in the "vm" object
        vm_json = {vm: vm_json};
        
        
        Sunstone.runAction("VM.create",vm_json);
		
        //OpenNebula.VM.create({data: vm_json,
		//		success: addVMachineElement,
		//		error: onError});

        $('#create_vm_dialog').dialog('close');
		return false;
	});

	$('button#create_vm_form_manual').click(function(){
		template = $('#textarea_vm_template').val();

        //wrap it in the "vm" object
        template = {"vm": {"vm_raw": template}};

        Sunstone.runAction("VM.create",template);
		//OpenNebula.VM.create({data: template,
		//			success: addVMachineElement,
		//			error: onError});
		 $('#create_vm_dialog').dialog('close');
		return false;
	});

	$('button#reset_vm_form').click(function(){
		$('select#disks_box option',section_disks).remove();
		$('select#nics_box option',section_networks).remove();
		$('select#inputs_box option',section_inputs).remove();
		return true;
	});


}

function popUpCreateVMDialog(){
    $('#create_vm_dialog').dialog('open');
}

function setVMAutorefresh(){
     setInterval(function(){
		var checked = $('input:checked',dataTable_vMachines.fnGetNodes());
        var filter = $("#datatable_vmachines_filter input").attr("value");
		if (!checked.length && !filter.length){
            Sunstone.runAction("VM.autorefresh");
		}
	},INTERVAL+someTime()); //so that not all refreshing is done at the same time
}

$(document).ready(function(){
    
    dataTable_vMachines = $("#datatable_vmachines").dataTable({
      "bJQueryUI": true,
      "bSortClasses": false,
      "sPaginationType": "full_numbers",
      "bAutoWidth":false,
      "aoColumnDefs": [
                        { "bSortable": false, "aTargets": ["check"] },
                        { "sWidth": "60px", "aTargets": [0] },
                        { "sWidth": "35px", "aTargets": [1] },
                        { "sWidth": "100px", "aTargets": [2] }
                       ]
    });
    
    dataTable_vMachines.fnClearTable();
    addElement([
        spinner,
        '','','','','','','',''],dataTable_vMachines);
	Sunstone.runAction("VM.list");
    
    setupCreateVMDialog();
    setVMAutorefresh();
    
    initCheckAllBoxes(dataTable_vMachines);
    tableCheckboxesListener(dataTable_vMachines);
    vMachineInfoListener();
    setupTips($('#create_vm_dialog'));
    
    
})
