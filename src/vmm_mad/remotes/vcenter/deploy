#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2017, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION = ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver2'

dfile = ARGV[0]
cluster_name  = ARGV[1]
vm_id = ARGV[2]

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(STDIN.read), 'VM')

host_id = drv_action["/VM/HISTORY_RECORDS/HISTORY/HID"]

# lcm_state_num = drv_action["/VM/LCM_STATE"].to_i
# lcm_state     = OpenNebula::VirtualMachine::LCM_STATE[lcm_state_num]

host = OpenNebula::Host.new_with_id(host_id, OpenNebula::Client.new)
rc = host.info
if OpenNebula::is_error?(rc)
    STDERR.puts rc.message
    exit -1
end

vi_client = VCenterDriver::VIClient.new_from_host(host_id)

target_ds_id = drv_action['HISTORY_RECORDS/HISTORY[last()]/DS_ID']
target_ds_one = VCenterDriver::VIHelper.one_item(OpenNebula::Datastore, target_ds_id)
target_ds_ref = target_ds_one['TEMPLATE/VCENTER_DS_REF']

begin
    # Clone from template
    vm = VCenterDriver::VirtualMachine.new

    vm.vi_client     = vi_client
    vm.one_item      = drv_action
    vm.host          = host
    vm.target_ds_ref = target_ds_ref

    puts vm.clone_vm

rescue Exception => e
    STDERR.puts "Deploy of VM #{vm_id} on vCenter cluster #{cluster_name} " +
                "with #{dfile} failed due to \"#{e.message}\""
    exit -1
end
