#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2017, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION = ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver2'

dfile        = ARGV[0]
cluster_name = ARGV[1]
vm_id        = ARGV[2]

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(STDIN.read), 'VM')

deploy_id    = drv_action["DEPLOY_ID"]
host_id      = drv_action["HISTORY_RECORDS/HISTORY/HID"]

vi_client = VCenterDriver::VIClient.new_from_host(host_id)

begin
    if deploy_id && !deploy_id.empty?
        # VM is not new, we just need to reconfigure it and to power it on
        vm = VCenterDriver::VirtualMachine.new_from_ref(deploy_id, vi_client)

        # Setting one_item is optional, but it saves a couple of API calls if
        # we already have it
        vm.one_item = drv_action
    else
        # VM is new
        vm = VCenterDriver::VirtualMachine.new

        # Clone from template
        vm.clone_vm(drv_action, vi_client)
    end

    vm.reconfigure
    vm.poweron
    vm.set_running(true)

    puts vm['_ref']
rescue Exception => e
    STDERR.puts "Deploy of VM #{vm_id} on vCenter cluster #{cluster_name} " +
                "with #{dfile} failed due to \"#{e.message}\"\n#{e.backtrace}"
    exit -1
end
