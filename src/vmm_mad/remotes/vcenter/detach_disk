#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2017, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver2'

vm_ref           = ARGV[0]
vc_cluster_name  = ARGV[-1]

drv_action_enc = STDIN.read.gsub("\n","")
drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc), 'VMM_DRIVER_ACTION_DATA')

# Get vc_cluster_name from driver action or stick with ARGV[0]?
host = VCenterDriver::VIHelper.find_by_name(OpenNebula::HostPool, vc_cluster_name)
host_id = host['ID']

begin
    vi_client = VCenterDriver::VIClient.new_from_host(host_id)

    vm = VCenterDriver::VirtualMachine.new_from_ref(vm_ref, vi_client)

    disks = drv_action.retrieve_xmlelements("VM/TEMPLATE/DISK[ATTACH='YES']")

    raise "Could not find a DISK element with ATTACH=YES" if disks.size == 0

    raise "Found more than one DISK element with ATTACH=YES" if disks.size > 1

    vm.detach_disk(disks.first)

    vi_client.close_connection
rescue Exception => e
    STDERR.puts "Detach image for VM #{vm_ref} on vCenter cluster #{vc_cluster_name} "\
                "failed due to \"#{e.message}\"\n#{e.backtrace}"
    exit -1
end