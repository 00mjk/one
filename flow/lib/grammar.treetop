# -------------------------------------------------------------------------- #
# Copyright 2010-2013, C12G Labs S.L.                                        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

grammar ElasticityGrammar

    rule expression
        space exp:(boolean_exp / logic_cond) space {
            def result(role)
                return exp.result(role)
            end
        }
    end

    rule boolean_exp
        left:logic_cond space ('&&' / '&') space right:expression {
            def result(role)
                return left.result(role) && right.result(role)
            end
        }
        /
        left:logic_cond space ('||' / '|') space right:expression {
            def result(role)
                return left.result(role) || right.result(role)
            end
        }
    end

    rule logic_cond
#        'true' {
#            def result(role)
#                return true
#            end
#        }
#        /
#        'false' {
#            def result(role)
#                return false
#            end
#        }
#        /
        left:operand space comp_op space right:operand {
            def result(role)
                l_res = left.result(role)
                r_res = right.result(role)

                if l_res.nil? || r_res.nil?
                    # An attribute was not found, we return false instead
                    # of assuming a value of 0

                    return false
                else
                    comp_op.apply(l_res, r_res)
                end
            end
        }
        /
        '!' space expression {
            def result(role)
                return !expression.result(role)
            end
        }
        /
        '(' space expression space ')' {
            def result(role)
                expression.result(role)
            end
        }
    end

    rule comp_op
        ('==' / '=') {
            def apply(a,b)
                a == b
            end
        }
        /
        ('!=' / '<>') {
            def apply(a,b)
                a != b
            end
        }
        /
        '>=' {
            def apply(a,b)
                a >= b
            end
        }
        /
        '>' {
            def apply(a,b)
                a > b
            end
        }
        /
        '<=' {
            def apply(a,b)
                a <= b
            end
        }
        /
        '<' {
            def apply(a,b)
                a < b
            end
        }
    end

    rule operand
        ( number ) {
            def result
                number.result(role)
            end
        }
        /
        ( variable ) {
            def result
                variable.result(role)
            end
        }
    end

    rule number
        '-'? [0-9]+ '.' [0-9]+ {
            def result(role)
                text_value.to_f
            end
        }
        /
        '-'? [0-9]+ {
            def result(role)
                text_value.to_i
            end
        }
    end

    rule variable
        ( '"' [a-zA-Z] [0-9a-zA-Z_]* '"'
        / '\'' [a-zA-Z] [0-9a-zA-Z_]* '\''
        / [a-zA-Z] [0-9a-zA-Z_]*
        ) {

            def result(role)
                nodes = role.get_nodes
                total = 0
                n_nodes = 0
                att = text_value.upcase

                # TODO: search in 'TEMPLATE' also?
                # TODO: what to do if value is not found

                nodes.each { |node|
                    if node && node['vm_info']
                        if node['vm_info']['VM']['USER_TEMPLATE'][att]
                            total += (node['vm_info']['VM']['USER_TEMPLATE'][att]).to_f
                            n_nodes += 1
                        elsif node['vm_info']['VM'][att]
                            total += (node['vm_info']['VM'][att]).to_f
                            n_nodes += 1
                        elsif node['vm_info']['VM']['TEMPLATE'][att]
                            total += (node['vm_info']['VM']['TEMPLATE'][att]).to_f
                            n_nodes += 1
                        end
                    end
                }

                # The attribute wasn't found for any of the nodes
                if n_nodes == 0
                    return nil
                end

                Log.debug "ELAS", "Role #{role.name} attribute #{att} avg value of #{total / n_nodes}"

                return total / n_nodes
            end
        }
    end

    rule space
      ' '*
    end
end