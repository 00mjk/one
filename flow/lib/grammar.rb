# Autogenerated from a Treetop grammar. Edits may be lost.


module ElasticityGrammar
  include Treetop::Runtime

  def root
    @root ||= :logic_cond
  end

  module LogicCond0
    def left
      elements[0]
    end

    def space1
      elements[1]
    end

    def comp_op
      elements[2]
    end

    def space2
      elements[3]
    end

    def right
      elements[4]
    end
  end

  module LogicCond1
    def result(role)
        comp_op.apply(left.result(role), right.result(role))
    end
  end

  def _nt_logic_cond
    start_index = index
    if node_cache[:logic_cond].has_key?(index)
      cached = node_cache[:logic_cond][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_operand
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_comp_op
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            r5 = _nt_operand
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LogicCond0)
      r0.extend(LogicCond1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:logic_cond][start_index] = r0

    r0
  end

  module CompOp0
    def apply(a,b)
        a == b
    end
  end

  module CompOp1
    def apply(a,b)
        a != b
    end
  end

  module CompOp2
    def apply(a,b)
        a > b
    end
  end

  module CompOp3
    def apply(a,b)
        a >= b
    end
  end

  module CompOp4
    def apply(a,b)
        a < b
    end
  end

  module CompOp5
    def apply(a,b)
        a <= b
    end
  end

  def _nt_comp_op
    start_index = index
    if node_cache[:comp_op].has_key?(index)
      cached = node_cache[:comp_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('==', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('==')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('=', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        r2.extend(CompOp0)
        @index += 1
      else
        terminal_parse_failure('=')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('!=', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('!=')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('<>', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            r4.extend(CompOp1)
            @index += 2
          else
            terminal_parse_failure('<>')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('>', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              r5.extend(CompOp2)
              @index += 1
            else
              terminal_parse_failure('>')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('>=', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
                r6.extend(CompOp3)
                @index += 2
              else
                terminal_parse_failure('>=')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('<', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  r7.extend(CompOp4)
                  @index += 1
                else
                  terminal_parse_failure('<')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('<=', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    r8.extend(CompOp5)
                    @index += 2
                  else
                    terminal_parse_failure('<=')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:comp_op][start_index] = r0

    r0
  end

  module Operand0
    def result
        number.result(role)
    end
  end

  module Operand1
    def result
        variable.result(role)
    end
  end

  def _nt_operand
    start_index = index
    if node_cache[:operand].has_key?(index)
      cached = node_cache[:operand][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_number
    if r1
      r0 = r1
    else
      r2 = _nt_variable
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:operand][start_index] = r0

    r0
  end

  module Number0
  end

  module Number1
    def result(role)
        text_value.to_i
    end
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('\G[1-9]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Number0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Number1)
    else
      if has_terminal?('0', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('0')
        r5 = nil
      end
      if r5
        r0 = r5
        r0.extend(Number1)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Variable0
    def result(role)
        nodes = role.get_nodes
        total = 0

        nodes.each { |node|
            if node && node['vm_info'] && node['vm_info']['VM']['USER_TEMPLATE'][text_value.upcase]
                # TODO: Check value is numeric
                total += (node['vm_info']['VM']['USER_TEMPLATE'][text_value.upcase]).to_f
            end
        }

        Log.debug "ELAS", "Role #{role.name} attribute #{text_value.upcase} avg value of #{total / nodes.size}"

        return total / nodes.size
    end
  end

  def _nt_variable
    start_index = index
    if node_cache[:variable].has_key?(index)
      cached = node_cache[:variable][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Variable0)
    end

    node_cache[:variable][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(' ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(' ')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:space][start_index] = r0

    r0
  end

end

class ElasticityGrammarParser < Treetop::Runtime::CompiledParser
  include ElasticityGrammar
end
